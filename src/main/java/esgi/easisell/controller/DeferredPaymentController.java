package esgi.easisell.controller;

import esgi.easisell.dto.*;
import esgi.easisell.service.DeferredPaymentService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@RestController
@RequestMapping("/api/deferred-payments")
@RequiredArgsConstructor
@Slf4j
@CrossOrigin(origins = "*") // ‚úÖ AUTORISER CORS TEMPORAIREMENT
public class DeferredPaymentController {

    private final DeferredPaymentService deferredPaymentService;

    /**
     * Cr√©er un nouveau paiement diff√©r√©
     * POST /api/deferred-payments
     */
    @PostMapping
    public ResponseEntity<?> createDeferredPayment(
            @RequestBody DeferredPaymentCreateDTO createDTO,
            HttpServletRequest request) {

        log.info("‚úÖ Cr√©ation d'un paiement diff√©r√© pour la vente: {}", createDTO.getSaleId());

        try {
            DeferredPaymentResponseDTO response = deferredPaymentService.createDeferredPayment(createDTO);
            log.info("‚úÖ Paiement diff√©r√© cr√©√© avec succ√®s: {}", response.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la cr√©ation du paiement diff√©r√©", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * R√©cup√©rer tous les paiements diff√©r√©s d'un client
     * GET /api/deferred-payments/client/{clientId}
     */
    @GetMapping("/client/{clientId}")
    public ResponseEntity<?> getDeferredPaymentsByClient(
            @PathVariable UUID clientId,
            HttpServletRequest request) {

        log.info("üìã R√©cup√©ration des paiements diff√©r√©s pour le client: {}", clientId);

        try {
            List<DeferredPaymentResponseDTO> payments = deferredPaymentService.getDeferredPaymentsByClient(clientId);
            log.info("‚úÖ {} paiements diff√©r√©s trouv√©s", payments.size());
            return ResponseEntity.ok(payments);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des paiements diff√©r√©s", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * R√©cup√©rer les paiements en retard
     * GET /api/deferred-payments/client/{clientId}/overdue
     */
    @GetMapping("/client/{clientId}/overdue")
    public ResponseEntity<?> getOverduePayments(
            @PathVariable UUID clientId,
            HttpServletRequest request) {

        log.info("üî¥ R√©cup√©ration des paiements en retard pour le client: {}", clientId);

        try {
            List<DeferredPaymentResponseDTO> overduePayments = deferredPaymentService.getOverduePayments(clientId);
            log.info("‚úÖ {} paiements en retard trouv√©s", overduePayments.size());
            return ResponseEntity.ok(overduePayments);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des paiements en retard", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Enregistrer un paiement (partiel ou total) - FIX PRINCIPAL
     * POST /api/deferred-payments/{paymentId}/pay
     */
    @PostMapping("/{paymentId}/pay")
    public ResponseEntity<?> recordPayment(
            @PathVariable UUID paymentId,
            @RequestParam BigDecimal amount,
            HttpServletRequest request) {

        log.info("üí∞ Enregistrement d'un paiement de {} pour le paiement diff√©r√©: {}", amount, paymentId);

        try {
            DeferredPaymentResponseDTO response = deferredPaymentService.recordPayment(paymentId, amount);
            log.info("‚úÖ Paiement enregistr√© avec succ√®s. Nouveau statut: {}", response.getStatus());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'enregistrement du paiement", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Mettre √† jour un paiement diff√©r√©
     * PUT /api/deferred-payments/{paymentId}
     */
    @PutMapping("/{paymentId}")
    public ResponseEntity<?> updateDeferredPayment(
            @PathVariable UUID paymentId,
            @RequestBody DeferredPaymentUpdateDTO updateDTO,
            HttpServletRequest request) {

        log.info("‚úèÔ∏è Mise √† jour du paiement diff√©r√©: {}", paymentId);

        try {
            DeferredPaymentResponseDTO response = deferredPaymentService.updateDeferredPayment(paymentId, updateDTO);
            log.info("‚úÖ Paiement diff√©r√© mis √† jour avec succ√®s");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la mise √† jour du paiement diff√©r√©", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Supprimer un paiement diff√©r√©
     * DELETE /api/deferred-payments/{paymentId}
     */
    @DeleteMapping("/{paymentId}")
    public ResponseEntity<?> deleteDeferredPayment(
            @PathVariable UUID paymentId,
            HttpServletRequest request) {

        log.info("üóëÔ∏è Suppression du paiement diff√©r√©: {}", paymentId);

        try {
            deferredPaymentService.deleteDeferredPayment(paymentId);
            log.info("‚úÖ Paiement diff√©r√© supprim√© avec succ√®s");
            return ResponseEntity.ok(Map.of("message", "Paiement diff√©r√© supprim√© avec succ√®s"));
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la suppression du paiement diff√©r√©", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Rechercher des paiements diff√©r√©s
     * GET /api/deferred-payments/client/{clientId}/search
     */
    @GetMapping("/client/{clientId}/search")
    public ResponseEntity<?> searchDeferredPayments(
            @PathVariable UUID clientId,
            @RequestParam String q,
            HttpServletRequest request) {

        log.info("üîç Recherche de paiements diff√©r√©s pour le client: {} avec le terme: {}", clientId, q);

        try {
            List<DeferredPaymentResponseDTO> results = deferredPaymentService.searchDeferredPayments(clientId, q);
            log.info("‚úÖ {} r√©sultats de recherche trouv√©s", results.size());
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la recherche de paiements diff√©r√©s", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Obtenir les statistiques des paiements diff√©r√©s
     * GET /api/deferred-payments/client/{clientId}/stats
     */
    @GetMapping("/client/{clientId}/stats")
    public ResponseEntity<?> getDeferredPaymentStats(
            @PathVariable UUID clientId,
            HttpServletRequest request) {

        log.info("üìä R√©cup√©ration des statistiques de paiements diff√©r√©s pour le client: {}", clientId);

        try {
            DeferredPaymentStatsDTO stats = deferredPaymentService.getDeferredPaymentStats(clientId);
            log.info("‚úÖ Statistiques r√©cup√©r√©es avec succ√®s");
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la r√©cup√©ration des statistiques", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Envoyer des rappels de paiement
     * POST /api/deferred-payments/client/{clientId}/send-reminders
     */
    @PostMapping("/client/{clientId}/send-reminders")
    public ResponseEntity<?> sendPaymentReminders(
            @PathVariable UUID clientId,
            HttpServletRequest request) {

        log.info("üìß Envoi des rappels de paiement pour le client: {}", clientId);

        try {
            deferredPaymentService.sendPaymentReminders(clientId);
            log.info("‚úÖ Rappels de paiement envoy√©s avec succ√®s");
            return ResponseEntity.ok(Map.of("message", "Rappels de paiement envoy√©s avec succ√®s"));
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de l'envoi des rappels", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }

    /**
     * Mettre √† jour les statuts des paiements en retard (endpoint admin)
     * POST /api/deferred-payments/update-overdue-status
     */
    @PostMapping("/update-overdue-status")
    public ResponseEntity<?> updateOverduePayments(HttpServletRequest request) {

        log.info("üîÑ Mise √† jour des statuts des paiements en retard");

        try {
            deferredPaymentService.updateOverduePayments();
            log.info("‚úÖ Statuts des paiements en retard mis √† jour");
            return ResponseEntity.ok(Map.of("message", "Statuts des paiements en retard mis √† jour"));
        } catch (Exception e) {
            log.error("‚ùå Erreur lors de la mise √† jour des statuts", e);
            return ResponseEntity.badRequest()
                    .body(Map.of("error", e.getMessage()));
        }
    }
}